#pragma once

#ifndef MATRIX_H
#define MATRIX_H

#include <iostream>
using namespace std;

/*
 * 2?ят?x?}??[?M???
 */
 
class Matrix {
private:
	double ** data;			// ?@??G????double?x?}
	int row;			// ?x?sdata?@???X??row
	int col;			// ?x?sdata?@???X??col
	void setUp(int, int);		// utility function, ?]?wrow?Mcol????

public:
	Matrix();			// default constructor, ????????, ?Ndata?s?J2*2???O0????
	Matrix(int, int);		// constructor, ?u?]?w?j?p, ???w?]??0
	Matrix(int, int, double [], int);// constructor, ?N??J???@???}?C??s???G???}?C??Jdata??
	Matrix(const Matrix &);		// copy constructor
	~Matrix();			// destructor, ?M?zdata

	void setData(int, int, double);	// ?]?w??(r,c)??mdata????

	int getRow() const;		// ?^??private member: row
	int getCol() const;		// ?^??private member: col
	double getData(int, int) const;	// ????x?}(r,c)??m????

	Matrix add(const Matrix &);		// ?x?}??[, ?^???[???x?}
	Matrix multiply(const Matrix &);	// ?x?}???, ?^???????x?}
	Matrix transpose(const Matrix &);	// ?x?}??m, ?^????m???x?}
    
	void displayData() {	// ?N?o??x?}?????L?X?? (???????)
		for (int i = 0;i<row; i++) {
			for (int j = 0;j<col; j++) {
					cout<<data[i][j]<<"\t";
    			}
			cout<<""<<endl;
		}
	}
		
};

#endif